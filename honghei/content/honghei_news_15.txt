-----------------------------------------------------------0-----------------------------------------------------------
0X0: 
     [06.29]FireEye报告：中国网络间谍行动减少源于中美协议与军事改革 

近日，FireEye发布报告称自2014年年中起，中国政府已经减少了针对美国的网络攻击活动。
=700) window.open('http://image.3001.net/images/20160623/14666701518296.jpg')" style="max-width:700pxmax-height:700px" onload="if(is_ie6&&this.offsetWidth>700)this.width=700" >
报告指出，中国继续保持稳定的节奏发动攻击，但2016年安全供应商发现中国间谍组织每月实施的攻击数量不超过10例。
根据FireEye 的报告，中国网络攻击放缓具有一定的原因，2014年初至年中，中国网络攻击相对频繁，但之后每个月这类攻击活动的数量开始呈现下降趋势。　


军事改革减少网络行动　

FireEye 表示，首先中国主席习近平的军事和政治改革发挥的作用最大。习主席于2012年11月执政，他曾表示政府和军事机构应停止使用国家资源完成自己的工作。
他指的是物理军事资源，也包括网络间谍行动。根据FireEye的统计数据，当时至少有72个网络间谍组织在运作，或多或少有证据将他们与中国政府、军事或其他机构关联起来。　
在大多数攻击行动中，这些间谍组织将目标对准私营企业，他们窃取的知识产权神秘地进入中国私营企业的手中。
中国间谍组织于2013年开始实施攻击，2014最为活跃。习主席对中国军事所做的改革包括，整合了一个名叫PLA网络空间战略情报研究中心（2014年6月）下的网络资源，以便更好掌控所有这些组织。自此，中国开始执行严格的政策并对所有组织和行动进行强有力的管制。　


美国开始采取法律和经济行动　

2014年，安全供应商定期发布的，有关中国大陆大规模网络间谍活动报告数量，开始引起公众和中国政府的注意。　
中国网络行动慢慢浮出水面，中国也同美国（斯诺登事件）一样被描绘成“黑色”。　
基于这些报告，美国开始反对中国黑客。美国首先控告了5名中国军官，然后是Su Bin。　
有关Su Bin的先关报道，请点击查看《一中国商人在美法院承认曾从事网络间谍活动》
2015年底，美国陷入烦恼，考虑对中国实施经济制裁。　


中美反间谍协定取得成果

2015年9月，为缓和中美两国之间的关系，美国总统奥巴马和中国主席习近平达成协定，双方政府互不“实施或故意支持窃取知识产权的网络窃犯”。　
达成协定后，中国网络间谍行动总体减少至每月10起，之后甚至持续呈放慢趋势。
=700) window.open('http://image.3001.net/images/20160623/14666633182054.jpg')" style="max-width:700pxmax-height:700px" onload="if(is_ie6&&this.offsetWidth>700)this.width=700" >
FireEye表示，自此以后，2015年9月―2016年6月，它发现只有13个活跃的网络间谍组织与中国政府有关。　


网络攻击步伐放缓但从未停止　

去年签订反间谍协定后，仍有网络攻击对准美国公司，但火眼表示，大多数中国网络行动目前对准其它目标，通常是邻国以及政治事件，比如台湾政治选举和香港暴乱。
在这些美国目标中，火眼罗列了一家美国高科技公司（2016年4月―5月间被攻击），美国政府服务公司窃取美国军事项目（2016年3月―5月），一家美国高科技公司窃取导航软件（2015年8月―2016年3月），美国一家医疗机构（2016年3月），美国一家软件公司窃取导航项目数据（2012年12月―2016年3月）。　　
FireEye解释道，

“三年之后，威胁数量减少，但更集中，并成功影响公司网络。与其将习主席与奥巴马之间的协定视为转折点，我们总结出这个协定是多年来戏剧性变化的一个点。我们认为导致中国间谍组织发生这些变化的原因包括习主席的军事和政治主张、中国网络行动的广泛曝光以及来自美国政府的越来越多的压力。”
 =700) window.open('http://image.3001.net/images/20160623/14666634543154.jpg')" style="max-width:700pxmax-height:700px" onload="if(is_ie6&&this.offsetWidth>700)this.width=700" >




-----------------------------------------------------------1-----------------------------------------------------------
0X1: 
     [06.29]企业共享威胁情报？困难远远比想象中多 

从理论上来说，共享威胁情报是一件很有意义的事情。但在互联网安全领域，这件「美好的事情」要实现并非那么容易。 
=700) window.open('http://image.3001.net/images/20160620/14664288484852.jpg')" style="max-width:700pxmax-height:700px" onload="if(is_ie6&&this.offsetWidth>700)this.width=700" >
美国国土安全部三月份的时候部署了自动指示共享系统（Automated Indicator Sharing），无论是私人组织还是公共组织都可以在该系统中进行威胁情报的交换。可以看出美国国土安全部的初衷是好的，在这样的系统中可以加快信息分享和传播的速度，帮助各种类型的企业和组织在威胁刚出现时做好及时的防护工作。
有很多信息安全专家也表示，网络威胁情报信息给组织带来很大的价值。但如果去探究共享过程中大家对此的态度以及执行中遇到的障碍，就会发现，事情并非像想象中进行的那般顺利。


企业愿意共享哪些威胁情报？

我们一起来分析下人们愿意或不愿意分享的威胁和信誉数据有哪些。英特尔安防调查了全球500名专业人士，发现3/4的人愿意共享关于发现的恶意软件行为的信息。其实恶意软件细节的共享已经持续了很长时间，通常共享者都是一些供应商和不结盟的安全公司。不过让我们吃惊的是，这项意愿的人数竟然不是100%。
在被调查安全研究人员中， 58%愿意共享URL 信誉 、54%愿意共享外部 IP 地址信誉 、证书信誉和文件信誉分别占到43%和37%。
当询问受访者为什么未在企业内实施共享的网络威胁情报时，54%的受访者表示原因在于公司政策，24%表示是由于行业规范，其余没有共享数据的受访者表示，虽然对它感兴趣，但需要了解更多的信息，也有人表示担心共享的数据会被用于追溯到其公司或个人。


威胁情报共享攻不破的壁垒


网络威胁情报的内容包括可疑和恶意活动的详细信息以及元数据，也包含了攻击媒介，使用的方法，可以采取的遏制措施。但即使分享了信誉文件，它不包含任何个人身份信息。理论上，共享威胁情报对于打击犯罪时很有意义的，但在互联网安全领域面临的问题是，我们去处理和应对的不是一个已知的人，而是一个可以不断变化的ID。
=700) window.open('http://image.3001.net/images/20160620/14664289967458.jpg')" style="max-width:700pxmax-height:700px" onload="if(is_ie6&&this.offsetWidth>700)this.width=700" >
在赌场中常常用葛里芬名�（ Griffin Book）和黑名单来识别那些骗子的身份。大家会共享可疑者的信息，方便进行身份识别，也可疑阻止骗子们进入赌场。但在网络安全中，我们没有照片，没有名字，也没有其他关于个人特征的线索，我们能提供的是攻击类型（恶意软件、钓鱼、勒索软件）、IP范围或是邮箱地址。所以我们互相分享的是散列文件、封锁的IP和可能的邮箱地址，但是根据这些信息，我们还是很难像人脸识别技术那样去评断出对方的生物特征。
另一个壁垒是网络威胁的来源可以以很快改变和调整它的攻击方向与对象。在数字化形式下，新威胁与可能的攻击向量数不胜数。企业在检测和阻断威胁的有效性和之前相比已经差很多了。如果犯罪分子也可以得到类似我们这种共享威胁情报的话，他们就可以来判断什么样的行为容易被抓住，这样他们就可以及时调整策略。事实上，他们正得到这样的共享信息――即我们给他们提供的反馈。根据我们提供的共享威胁情报，他们可以知道做的哪部分工作是有效的，那部分是没有效果的，并且可以及时去调整攻击方法。


来自企业的忧虑

为何企业才参与度上差强人意呢？
毫无疑问，当我们开始谈论恶意软件系统而不是人的时候，威胁情报共享呈现了新的复杂性。很多企业想从共享威胁情报中获益，但是自己却不想提供太多的情报信息。其实这也可以理解，因为一旦你向他人公布自己发现的威胁情报，就表示你告诉大家：

1.我司现在可能是被攻击的对象
2.我司这有一个漏洞正好给大家开了个大门

如何更好使用威胁情报共享？

随着网络威胁发展和演变，很多企业把关注点放在“做什么”上。纠结于我们想分享什么样的信息，知道对手可能用什么方式来打击我们。
但也许我们应该把关注点放在“如何分享”上，我们怎样分享信息可以使我们的组织在对抗被攻击方面会更有力量？
虽然我也没有答案，但这有一些思考供大家参考：

1.在这些威胁情报之间实现机器对机器访问。例如威胁情报在一个机器可读模式上进行共享，再传到到SIEM上，这样只有具有检测系统的公司可以使用该信息。对于骗子们来说他们是不太可能花钱买昂贵的系统只为核查自己工作的。那么问题就变成了系统如何把信息汇报给负责人。

2.当公司需要选择共享数据时,多提示一些警告可能是更好的方式。如果他们已经共享信息(尽管匿名),说不定这些警告会让他们改变想法。




-----------------------------------------------------------2-----------------------------------------------------------
0X2: 
     [06.29]细数Android N的安全改进 

=700) window.open('http://image.3001.net/images/20160621/14664938888337.jpg')" style="max-width:700pxmax-height:700px" onload="if(is_ie6&&this.offsetWidth>700)this.width=700" >
上个月的Google I/O大会上，谷歌发布了Android N，但是大会的内容实在太多，导致都没有来得及详细介绍新系统的安全特性。现在，我们来看看Android N在安全层面有哪些改进。


Android加密改进有哪些？

Android N中强制严格执行验证启动（Verified Boot）机制 。在先前的Android 6.0棉花糖系统中，如果你修改了启动代码，系统只会发出警告；而到了Android N这代系统中，如果开发者仍然这么做，手机就不会再启动这样的应用了。
强制使用硬件级的密钥库：熟悉ARM芯片的同学应该知道，为了保证安全性，ARM架构处理器内部很早就出现了一个名叫TrustZone的安全区域――在先前的Android系统中，开发者可以选择将密钥存储在TrustZone中。但是从Android N开始，加密密钥将只能储存在TrustZone中。
抛弃弱加密的Cryto Provider。这在我们先前的文章中已经比较详尽地解释过（点击这里）。这实际上也是针对数据加密的重要举措。
支持文件级别的加密。之前Android系统提供全盘加密选项，但这会影响系统性能，很多用户都不愿意进行加密、解密、验证垃圾文件的繁琐操作。Android N则支持用户按需进行加密，只加密那些需要加密的文件。不过，针对这种文件级别的加密，Bitdefender高级威胁研究员Liviu Arsene却认为：

这项特性的缺点就是，这套文件系统的部分区域（比如交换分区）会把未加密的文件副本保留下来，攻击者能轻易读取这些文件。在这种情况下，的确还是全盘加密更安全些，虽然的确要牺牲一定的系统性能。
更新Network API，开发者可指定哪些URL使用明文形式的HTTP连接，哪些使用HTTPS连接。去年的棉花糖系统中，如果第三方SDK没有使用加密特性，开发者可以选择自动屏蔽这类SDK。而今年的Android N加入了一套过滤系统，这套系统支持让开发者指定哪些URL可使用明文形式的HTTP连接、又有哪些则需要使用HTTPS连接。
除此之外，升级后的Network API还统一了所有设备上的证书认证机构(CA)存储，以后所有用户安装的证书默认都不再是“可信”的了。
Mediaserver组件得到了加固――Mediaserver顾名思义就是媒体服务器，音频、视频、摄像头与之都有关。而加固过后，Mediaserver将会切分成更小的、沙盒封装的组件。
既然谈到沙盒了，顺带一提：在Android N系统中，谷歌是从Linux内核移植的“seccomp”沙盒机制――这东西原本并不包含在Android系统采用的Linux内核分支中。
=700) window.open('http://image.3001.net/images/20160620/14664324449715.png')" style="max-width:700pxmax-height:700px" onload="if(is_ie6&&this.offsetWidth>700)this.width=700" >
指纹验证机制得到了改进，开发者将有更多权限更细致地进行控制。新系统还引入了支持开发者检查设备健康度的函数，借此可检查核心操作系统代码是否被篡改。


特别针对勒索软件、银行木马

由于当前Android系统恶意程序越来越猖獗，谷歌也的确有意进行管控。所以这次谷歌限制了对Device Admin API的访问――对用户密码修改进行限制，这对勒索软件而言应该是个悲剧。应用无法再通过编程的方式更改现有密码，所有设备管理应用也都可以卸载。这样一来，要删除带管理员权限的恶意程序都会更方便。
而针对银行木马，谷歌打算针对SYSTEM_ALERT_WINDOW做出改动，这样可以有效限制应用在其他应用或系统对话框上随意使用overlay覆盖层。
这些对于限制勒索软件和银行木马的行动都是很有意义的。Android系统越来越注重安全方面的改进，这与现如今移动操作系统日益严峻的安全问题是分不开的。手机作为现如今人们日常生活的重要组成部分，其安全性早已不可忽视。


*参考来源：softpedia





-----------------------------------------------------------3-----------------------------------------------------------
0X3: 
     [06.29]摩根士丹利银行“失职”，罚款100万美元是多是少？ 

美国证券交易委员会(SEC)周三表示，银行巨头摩根士丹利(Morgan Stanley)由于未能保护约730000客户的信息，将会遭到100万美元的罚款。
=700) window.open('http://image.3001.net/images/20160621/14664793712746.jpg')" style="max-width:700pxmax-height:700px" onload="if(is_ie6&&this.offsetWidth>700)this.width=700" >
依照美国证券交易委员会(SEC)调查，摩根士丹利银行“未能采取书面的政策和程序合理保护客户数据”，使得雇员能够在客户账户，账户到个人服务器之间访问和传输数据，最终导致了第三方的入侵。
对此美国证券交易委员会(SEC)说道：

“可能是第三方的黑客组织黑掉了个人服务器，导致部分机密数据在互联网上公布并大量出售”

事件始末

在2015年1月，摩根士丹利(Morgan Stanley)承认约900客户的账户信息，包括帐号和名字被公布在互联网上，同时允诺任何客户的信息一旦发现将会立即移除。
而该银行的员工盖伦・马什，在2015年由于他的黑客行为，被依法判处了36个月的缓刑并要求赔偿600000美元。
根据美国证券交易委员会(SEC)确认，摩根士丹利(Morgan Stanley)违反了30 (a)的监管规则，也被称为“保障规则”
SEC执法部门的一位主任在一份声明中说，

“鉴于网络漏洞的危害和影响，数据安全是保护投资者的一个至关重要的方面。我们期待美国证券交易委员会为这些注册人提供各种规模的政策和程序，用来保护客户信息”而美国证交会也称，摩根士丹利(Morgan Stanley)没有审计或是测试“相关授权模块”或者是监视以及分析员工对用户包含敏感数据信息的访问。
目前摩根士丹利(Morgan Stanley)已经表示同意支付解决费用并且支付100万美元，但是却否认这些证据。
  *参考来源：securityweek







-----------------------------------------------------------4-----------------------------------------------------------
0X4: 
     [06.29]读云：云安全责任共担模式解读 



楔



自从大雄供职阿尔法星球某云计算厂商安全岗位后，入驻他公司公共云的朋友越来越多，但是随之而来大雄的困扰也在增加。
一些朋友经常因为自身业务安全问题遭到攻击而埋怨大雄，而大伙的腔调基本保持一致：我的业务放在你们云上，上了云我们自己没法部署安全设备，出了安全问题自然是你们厂商的责任。
就这样，大雄每次都要耐心地跟朋友们解释，公共云安全由大雄公司和朋友公司共同保障，云计算厂商负责云平台本身的安全，而云内部应用系统本身安全，云计算厂商没有权限鞭长莫及，需要朋友公司自己负责。
就这样，远在地球的无牙师傅听到大雄的抱怨后，给大雄寄了一个包裹。




一.大雄的时间胶囊



早上快递小哥送来一个包裹，大雄拆开后发现是一个精致的铁皮盒，盒子里放着一枚胶囊。胶囊上贴着标签，上写时间：2010年8月5日，坐标：南美洲智利科皮亚波市圣何塞矿场。
没忍住好奇心拧开了胶囊，轰的一声，大雄经历一阵眩晕后，醒来发现周围满是哭泣和奔跑的人群，不远处黑森森的矿洞像怪兽一样正往外喷着沙尘。没错，大雄不小心打开了一枚可亲身经历智利圣何塞矿难的时间胶囊。
=700) window.open('http://image.3001.net/images/20160620/14664148703583.jpg')" style="max-width:700pxmax-height:700px" onload="if(is_ie6&&this.offsetWidth>700)this.width=700" >
当智利矿业部长找到矿场主实施救援时，矿场主说他一生经历过五次矿难，但救出的人一个都没有。全世界每年大概有1万多名矿工死于矿难，但被找到的可能性不到1%，而存活人数更是微乎其微，地下622米深处，33条生命生死未卜，即使如此智利政府还是决定实施营救。
奇迹总是出现在绝望之后，第17天，被困矿工通过探测仪器向地面传递了一张纸条：33人全都活着！第69天，33位被困矿工全部救出。
目送最后一位矿工登上救生舱，大雄在622米深处的避难所中环顾四周，岩壁上写满了矿工的遗言，与地面连线的DV里播放着矿工与家属们欣喜对话，巨大的反差让大雄情绪激动，一阵彷佛，他醒来发现自己已在家中，手里多了一张残缺的小纸条，上面写着“Shared Responsibility”。
=700) window.open('http://image.3001.net/images/20160620/14664148956564.jpg')" style="max-width:700pxmax-height:700px" onload="if(is_ie6&&this.offsetWidth>700)this.width=700" >
责任共担，简简单单四个字，但是却是圣何塞矿难救援奇迹的全部总结。
一方面是智利政府充分承担起公民生命保障角色的责任。
规定矿场必须设置紧急避难所，并储备大量的救生物质以备不时之需，这是制度保障的先决条件。而灾难发生后又不遗余力地组织全世界各方力量进行人性化施救，利用高科技手段攻破救援攻关，在最短的时间里营救所有人员。
云计算厂商就如同智利政府一样，充分承担起云平台本身的安全保障责任，全力维护云上客户的安全。
另一方面是被困矿工自发承担起井下自救的责任，在生死关头33人并没有发生内讧，团结互助，有序地分配有限的食物和水，并且一直抱有被营救的希望和信心。
而云上客户则如同自救的被困矿工，不把安全保障完全寄希望于云计算厂商，放任自身安全工作不管不顾。一方面依托于云计算厂商的安全基础，另一方面自己使用云产品安全功能，SaaS服务和各安全厂商的虚拟化安全产品等等，通过这些手段来加强自身业务安全保障建设。
大雄在接到无牙师傅的电话后，才明白师傅的良苦用心，心里想着下次再碰到这些朋友就可以用时间胶囊对付他们了。




二、打更人的故事



责任共担这个模式自古有之，打更除了给居民进行北京时间报时的功能之外，还兼顾了发布警报、驱逐贼盗和警示村民等服务。
深夜时分，老胖头员外从邻村撸串回来，发现村东头王寡妇家的厢房窗户开着，借着酒胆凑近窗户想占点便宜，正好被村里头打更人老张撞见，老张梆子一敲，扯着嗓子吆喝：亥时二更，关门关窗，防偷防盗。
=700) window.open('http://image.3001.net/images/20160620/14664149482011.jpeg')" style="max-width:700pxmax-height:700px" onload="if(is_ie6&&this.offsetWidth>700)this.width=700" >
昏昏入睡的王寡妇被梆子吵醒，不经意往窗外一瞥，发现一猥琐老头正色迷迷地盯着自己，吓出一身冷汗，翻身下床顺便抄起夜壶就往窗外砸去，老胖头员外慌不择路，连滚带爬消失在夜幕里。
时过境迁，打更人这个职业慢慢消失，小区保安则开始担负起公共安全的职责，安排专人进行三班巡逻，而各家各户则负责自己家的防火防盗。
老李中午躺在客厅沙发上打呼噜睡觉忘记关门，被送外卖的小哥把玄关上的钱包和手机给顺走了，老李一脸懊恼，保安巡逻时已经提醒过好几次，但是老李这臭毛病一直没改，再把责任赖给保安也不好意思，只好打110报警，并联系保安调取监控视频。
小区公共治安维护依靠保安和片警，而各家各户防火防盗业主自己也要承担起相应的责任，这也是典型的责任共担模式。
正如保安和片警不会知道业主小刘家钥匙被朋友复制，从而发生大白天的被盗事件一样。云计算厂商也不会知道客户在中马终端上登陆业务系统，结果被黑客窃取了管理员用户和口令，这也是云安全责任共担的缘由之一。




三、历史的必然



云安全是一个复杂的体系，这个体系覆盖云计算基础设施、操作系统、应用和数据多个维度，而云安全责任共担这个模式在业界也已经达成了共识。
中央网信办在出台的《关于加强党政部门云计算服务网络安全管理的意见》明确，党政部门在采购使用云计算服务过程中应遵守的4项大的原则规定：安全管理责任不变，数据归属关系不变，安全管理标准不变，敏感信息不出境。 
从上面这段引文可以看出，安全管理责任不会因为计算环境变化而发生转移，之前在传统计算环境用户需要面对的安全威胁，在云计算环境同样存在。
因此无论是IaaS、PaaS、还是SaaS模式，安全责任总是分为两部分，一部分由云计算提供商承担，另一部分则由云上客户来承担，像亚马逊AWS、微软Azure、阿里云均采用这类模式。
有人会问，为什么公共云会出现责任共担模式？把所有的安全保障都交给CSP不是更好么？笔者本人也认同，把安全依托给CSP专业的安全团队来运营无疑是最理想的方法，这样可以避免云上客户安全能力参差不齐的被动局面。
但由于云服务模式的局限性，对CSP而言，操作系统、应用和数据在预设场景下是无法管控的，因此CSP在XaaS模式下注定是无法接管所有的安全职责的，所以云上客户需要与SaaS服务商和安全厂商虚拟化产品协同作战。
最终，安全责任共担就成了公共云安全最合适的解决之道。

对IaaS服务来说，CSP需保障物理、网络和虚拟化层面的安全，而用户需要保障操作系统、应用程序和数据的安全；
对PaaS服务来说，操作系统安全也归CSP负责，用户只需要负责应用程序和数据安全；
对SaaS服务来说， 用户要负责的就是数据安全，而其他所有的部分都是CSP的保障范围。安全责任共担模式对于公共云而言，是它赖以生存的基石，同时也是抵抗黑客攻击的最有效策略。攻击者从不考虑安全漏洞的归属，但防御方却需要有这个能力识别和处置。
=700) window.open('http://image.3001.net/images/20160620/14664150229833.jpg')" style="max-width:700pxmax-height:700px" onload="if(is_ie6&&this.offsetWidth>700)this.width=700" >
对于CSP而言，数以万计的云上客户安全保障需求变化，驱使着其安全团队将底层安全能力进行持续提升，像AWS、阿里云云盾团队就正朝着这个方向努力。那云上客户自身参差不齐的安全能力现状怎么解决，这恰恰是公共云安全生态建设要解决的核心问题，一朵鲜花盛开不代表冬天已走远，只有百花齐放才预示着春天的到来。
归根结底，安全是我们的，也是你们的。







-----------------------------------------------------------5-----------------------------------------------------------
0X5: 
     [06.29]BurpSuite插件开发Tips：请求响应参数的AES加解密 



缘由

自己使用burp进行测试的过程中遇到好些接口是有sign的，如果修改了请求参数都需要重新计算sign值，所以有用python实现过一个简单的插件，来自动计算sign值，以达到和普通接口测试一样方便的效果。
后来，好基友在做一个APP的测试的时候，发现有类似的问题，接口的所有参数都有使用AES加密，返回也是一样。他通过逆向获得了加密的算法，我们就通过如下的插件实现了自动加解密的过程。在整个过程中有一点点收获，现分享出来。
具体bug请移步：


Zealer_android客户端安全检测(从脱壳到burp自动加解密插件案例/SQL注入/逻辑漏洞/附AES加解密脚本POC)



代码

闲话少说，上代码，BurpExtender主类代码如下，进行了较为详细的注释。AES算法类的参考链接：
http://www.wenhq.com/article/view_716.html
package burp import java.util.ArrayListimport java.util.Listimport java.io.PrintWriterimport java.net.URLEncoderimport burp.AESOperator //AES加解密算法的实现类import burp.Util //unicode解码的实现类public classBurpExtender implements IBurpExtender, IHttpListener{ privateIBurpExtenderCallbacks callbacks privateIExtensionHelpers helpers privatePrintWriter stdout//用于输出，主要用于代码调试// implement IBurpExtender @Override publicvoidregisterExtenderCallbacks(IBurpExtenderCallbacks callbacks) {stdout = new PrintWriter(callbacks.getStdout(), true)//PrintWriter stdout = new PrintWriter(callbacks.getStdout(),true) 这种写法是定义变量和实例化一并进行，会覆盖之前的同名变量。//stdout.println(&quottestxx&quot)//System.out.println(&quottest&quot) 不会输出到burp的this.callbacks = callbackshelpers = callbacks.getHelpers()callbacks.setExtensionName(&quotAES encrypt Java edition&quot)//插件名称callbacks.registerHttpListener(this) //如果没有注册，下面的processHttpMessage方法是不会生效的。处理请求和响应包的插件，这是必要的。 }@Override publicvoidprocessHttpMessage(int toolFlag,boolean messageIsRequest,IHttpRequestResponsemessageInfo) {try{ List&ltString&gt paraWhiteList = newArrayList&ltString&gt() //参数白名单，白名单中的参数值不进行加密计算 paraWhiteList.add(&quotandroid&quot)if (toolFlag == 64 || toolFlag == 16 || toolFlag == 32 || toolFlag == 4){ //不同的toolflag代表了不同的burp组件。参考链接https://portswigger.net/burp/extender/api/constant-values.html#burp.IBurpExtenderCallbacks if (messageIsRequest){ //对请求包进行处理IRequestInfoanalyzeRequest= helpers.analyzeRequest(messageInfo) //对消息体进行解析 List&ltString&gtheaders= analyzeRequest.getHeaders()//获取http请求头的信息，返回可以看作是一个python中的列表，java中是叫泛型。boolean isFileUploadRequest=falsefor (String header : headers){ //stdout.println(header) if (header.toLowerCase().indexOf(&quotcontent-type&quot)!=-1&amp&amp header.toLowerCase().indexOf(&quotboundary&quot)!=-1){//通过http头中的内容判断这个请求是否是文件上传的请求。isFileUploadRequest= true }} if (isFileUploadRequest== false){//对文件上传的请求，对其中的参数不做加密处理 List&ltIParameter&gtparaList= analyzeRequest.getParameters()//获取参数列表，参数分为三种类型，URL中的参数，cookie中的参数，body中的参数。 byte[] new_Request = messageInfo.getRequest() for (IParameter para : paraList){// 循环获取参数，判断类型，进行加密处理后，再构造新的参数，合并到新的请求包中。if ((para.getType() == 0 || para.getType() == 1)&amp&amp !paraWhiteList.contains(para.getName())){ //getTpe()就是来判断参数是在那个位置的，cookie中的参数是不需要进行加密处理的。还要排除白名单中的参数。 Stringkey= para.getName()//获取参数的名称 Stringvalue= para.getValue()//获取参数的值 //stdout.println(key+&quot:&quot+value) AESOperatoraes= newAESOperator() //实例化加密的类 Stringaesvalue aesvalue = aes.encrypt(value) //对value值进行加密 aesvalue = URLEncoder.encode(aesvalue) //进行URL编码，否则会出现“=”等特殊字符导致参数判断异常 stdout.println(key+&quot:&quot+value+&quot:&quot+aesvalue) //输出到extender的UI窗口，可以让使用者有一些判断 IParameternewPara= helpers.buildParameter(key, aesvalue, para.getType()) //构造新的参数 new_Request = helpers.updateParameter(new_Request, newPara) //构造新的请求包} } messageInfo.setRequest(new_Request)//设置最终新的请求包}/* to verify the updated resultfor(IParameter para : helpers.analyzeRequest(messageInfo).getParameters()){ stdout.println(para.getValue())}*/ } else{//处理返回，响应包IResponseInfoanalyzedResponse= helpers.analyzeResponse(messageInfo.getResponse()) //getResponse的返回类型是Byte[]List&ltString&gtheader= analyzedResponse.getHeaders()short statusCode = analyzedResponse.getStatusCode()int bodyOffset = analyzedResponse.getBodyOffset()if (statusCode==200){ try{AESOperatoraes= newAESOperator()Stringresp= newString(messageInfo.getResponse())//Byte[] to StringString body = resp.substring(bodyOffset)String deBody= aes.decrypt(body)deBody = deBody.replace(&quot\&quot&quot,&quot\\\&quot&quot)String UnicodeBody = (new Util()).unicodeDecode(deBody)//String newBody = body +&quot\r\n&quot +UnicodeBody //将新的解密后的body附到旧的body后面String newBody = UnicodeBodybyte[] bodybyte = newBody.getBytes()messageInfo.setResponse(helpers.buildHttpMessage(header, bodybyte)) }catch(Exception e){stdout.println(e) }} } }}catch(Exception e){ stdout.println(e)} }}

收获和建议

1.能用java就不要用其他
我平常python用得比较多的，之前也用python写过几个简单插件。但是在开发burp插件的时候，发现还是Java更合适。上面的这个插件，最初就是用py实现的，但是，当这个py文件调了python的其他类，如下图。通过Jython去解析执行，遇到pyd文件就无法进行下去了，因为pyd是C写的，Jython是无法使用C写的模块的。burp本事是Java写的，使用Java去开发插件兼容性最高，会少很多莫名其妙的错误。
=700) window.open('http://image.3001.net/images/20160613/14658104734594.png')" style="max-width:700pxmax-height:700px" onload="if(is_ie6&&this.offsetWidth>700)this.width=700" >
下面这个链接对此有详细说明：
http://stackoverflow.com/questions/16218183/using-pyd-library-in-jython
=700) window.open('http://image.3001.net/images/20160613/14658105549687.png')" style="max-width:700pxmax-height:700px" onload="if(is_ie6&&this.offsetWidth>700)this.width=700" >
2.代码的适当分离
我会分别将插件的代码和AES算法的代码分别写在两个不同文件中。这样可以单独调试算法的代码，也可以让插件代码更简洁不易出错。因为插件的代码每修改一次都需要重新在burp中加载才可以看到效果，不像一般的程序在IDE中就可以调试，所以个人认为这样比较好。
=700) window.open('http://image.3001.net/images/20160613/14658107055030.png')" style="max-width:700pxmax-height:700px" onload="if(is_ie6&&this.offsetWidth>700)this.width=700" >
3.插件代码的模式
插件代码的结构基本是固定的。比如，如果想要写一个对http请求和响应进行操作的插件，那么基本上如图的这段代码是可以直接copy使用的，下图标红的几个方法就都是必须的。我想我们大多数时候都是在对http的包进行处理。有了大的框架之后，再进行修改相对会容易很多。所以，如果你想写一个什么样的插件，你完全可以去找一个类似的插件，看他的代码，copy他的代码，改他的代码。
=700) window.open('http://image.3001.net/images/20160613/14658110843982.png')" style="max-width:700pxmax-height:700px" onload="if(is_ie6&&this.offsetWidth>700)this.width=700" >
你要问怎么样查看已有插件的代码？怎样查API文档？
首先安装一个已有插件。

=700) window.open('http://image.3001.net/images/20160613/14658112007656.png')" style="max-width:700pxmax-height:700px" onload="if(is_ie6&&this.offsetWidth>700)this.width=700" >
找到burp所在路径下的bapps目录，里面就是你安装了的插件。
=700) window.open('http://image.3001.net/images/20160613/14658112112250.png')" style="max-width:700pxmax-height:700px" onload="if(is_ie6&&this.offsetWidth>700)this.width=700" >
=700) window.open('http://image.3001.net/images/20160613/14658112207654.png')" style="max-width:700pxmax-height:700px" onload="if(is_ie6&&this.offsetWidth>700)this.width=700" >
拖到JD-Gui中就可以看代码了，这种一般是不会做混淆的，至少我还没发现~。Py的就更不用说了，直接文件右键打打开。
=700) window.open('http://image.3001.net/images/20160613/14658112315306.png')" style="max-width:700pxmax-height:700px" onload="if(is_ie6&&this.offsetWidth>700)this.width=700" >
4.怎样阅读API文档
关于API文档，我是通过溯源的方法，对于0基础的读者比较实用。比如我的目的是加密各个参数，那么首先要获取请求中的参数。我先去API库中搜索关键词parameter，可以找到多个相关方法，通过对比，我确定List&ltIParameter&gt getParameters()是我需要的。找到这个方法后，查看它的参数、返回值类型、所属的类这三个关键因素。它属于IRequestInfo类，只有IRequestInfo类型的对象才可以调用它，那么，有哪些方法会返回这个类型的对象呢？再去找那些方法可以返回这个类型的方法。依次类推，可以知道需要使用哪些方法，哪些类，就能梳理清除大致的思路了。
=700) window.open('http://image.3001.net/images/20160613/14658115701726.png')" style="max-width:700pxmax-height:700px" onload="if(is_ie6&&this.offsetWidth>700)this.width=700" >


参考文档汇总

向先行者致敬，让我们少走弯路。
java 篇：
BurpSuite 扩展开发[1]-API与HelloWoldhttp://drops.wooyun.org/papers/3962
BurpSuite插件编写教程（第一篇） http://www.moonsos.com/Article/penetration/107.html
国产BurpSuite插件Assassin V1.0发布http://www.moonsos.com/tools/webscan/97.html
BurpSuite插件开发指南之 API 上篇http://www.evil0x.com/posts/17487.html
BurpSuite插件开发指南之 API 下篇http://drops.wooyun.org/tools/14685
BurpSuite插件开发指南之 Java 篇 http://drops.wooyun.org/tools/16056
Burpsuite插件开发之RSA加解密http://blog.nsfocus.net/burpsuite-plugin-development-rsa-encryption-decryption/
python篇：
burpsuite扩展开发之Python（change unicode to chinese） 我是从这入门的http://drops.wooyun.org/tools/5751
BurpSuite插件开发之过狗菜刀 http://www.secpulse.com/archives/44241.html
toolflag https://portswigger.net/burp/extender/api/constant-values.html#burp.IBurpExtenderCallbacks







-----------------------------------------------------------6-----------------------------------------------------------
0X6: 
     [06.29]他用10年前的攻击手法感染了17000多名开发者的电脑 

=700) window.open('http://image.3001.net/images/20160617/14661501982243.jpg')" style="max-width:700pxmax-height:700px" onload="if(is_ie6&&this.offsetWidth>700)this.width=700" >

大约10年前，有种名为Typosquatting的古老攻击手法――国内有将之翻译成“误植域名”的。这个词的前半部分“Typo”意思是排版错误，其实已经表达了这种攻击手法的内涵。举个例子：黑客可能会去注册像appple.com、taobaoo.com这样的域名，如果用户手误多输一个字幕，就会访问到这样的网站――这些网站还会模仿原网站，也就可以起到钓鱼的作用了。所以Typosquatting如果要分类的话，大概是可以划归到钓鱼攻击中去的。不过这类攻击手法主要是寄希望于用户可能会输错某些域名。
最近来自德国汉堡大学的学生，利用Typosquatting攻击，将他自己的代码感染到了超过17000台开发者的计算机中。注意哦，是开发者的计算机！而且里面很多人还是为美国政府，甚至军方组织工作的。


究竟是怎么感染的？

这名汉堡大学的学生现年25岁，名叫Nikolai Philipp Tschacher。他在自己的学士论文里大致阐述了这种攻击手法，论文名为《Typosquatting in Programming Language Package Managers》，有兴趣的同学可以去搜一下。
整个过程其实很简单：他首先去浏览一些专门探讨编程语言的社区网站（如PyPI、RubyGems、NPM），记录了其中下载量较高的214个包。然后他自己伪造了这214个包，里面包含他自己的脚本代码（虽然并非恶意的），名字与这214个包非常相似。
虽然不是域名，不过他也将之称作Typosquatting攻击。实际上里面的确没有包含什么恶意代码，只是给那些下载的开发者以警示：您安错包啦！另外，这段代码还会向Tschacher的计算机发送一个Web请求，这样他就能够记录他的代码执行了多少次，是否获取到管理员权限。


攻击结果很“理想”

最终的结果是很“喜人”的，几个月时间内，他的代码就在超过17000个独立域名中执行了超过45000次，其中超过一半还获得了管理员权限。意外发现是，其中有两个域名后缀为.mil，表明这是美军有人也运行了这段脚本。Tschacher在论文中说：

“另外还有23个域名以.gov结尾，是美国政府机构的域名。这个数字是值得人们关注的，因为拿下美国研究工作室和政府机构的主机，会带来灾难性的后果。”这件事比较有趣的地方在于，Tschacher攻击目标并非普通终端用户，而是开发者。如果Tschacher真的有意进行攻击，并植入了恶意代码，那么打击面和传播速度都并非一般的钓鱼网站可比。但凡从开发者入手的攻击，总是能够在短期内极速传播，因为如果开发过程都在神不知鬼不觉的情况下被植入恶意代码，那么终端用户遭遇攻击也就显得理所应当。
很多时候，将政府和企业作为目标的的攻击者，都很喜欢从开发者下手。因为开发者对敏感网络拥有很高的访问权限，能做的事自然就多多了。
=700) window.open('http://image.3001.net/images/20160617/14661504235674.jpg')" style="max-width:700pxmax-height:700px" onload="if(is_ie6&&this.offsetWidth>700)this.width=700" >


延伸阅读：有关Bitsquatting

是不是感觉这群被感染的开发者很弱智？然而实际上，Typosquatting也有比较高级的应用。最后这部分作为简单的延伸：早在2011年的时候，安全研究人员Artem Dinaburg曾经介绍过一种名为Bitsquatting的攻击，基本理念就是取自于Typosquatting，但它并不依赖于用户输错域名，而是利用计算机的随机单比特错误（详情点击这里）。
其实所谓的比特错误是发生在硬件产品上的，比如内存、CPU缓存因为环境或者灰尘、辐射之类的，会莫名产生比特错误（如著名的UltraSparc II CPU就存在这种问题）。比如我们要访问一家网站，域名是n.com。其二进制表达方式是这样的：
 n .  c  o  m  01101110  0101110  01100011  01101111  01101101 如果内存模块发生比特错误，某一位比特发生错误，就会变成下面这样。你在访问n.com这个域名的时候，二进制数据是需要过一次内存的，但最终我们访问到的实际上是o.com，这个过程真正实现了神不知鬼不觉。如果有人注册一个o.com域名，用于模仿n.com网站，则钓鱼成功率几乎可以达到100%。
o.  c  o  m  01101111  0101110  01100011  01101111  01101101 这听起来似乎很悬，前两年国外有安全专家特别做了针对Bitsquatting的实验（首先选择一些可能产生一比特之差的域名注册，比如说micrgsoft.com，然后主要从DNS来入手这个实验），结果每天都存在Bitsquatting后的域名请求，的确非常神奇。





-----------------------------------------------------------7-----------------------------------------------------------
0X7: 
     [06.15]卡巴斯基发现ATM病毒Skimmer改进版 

在2009年，我们发现了一种新的攻击银行的方式――不再感染成千上万用户的电脑，而是使用了一个名为Skimmer的恶意软件直接攻击ATM，今年，我们的全球研究与分析团队和渗透测试团队发现了一个改进版的Skimmer。


病毒式感染

攻击者为了让研究者难以分析其恶意软件，通常使用加壳的方式掩盖其恶意软件代码。Skimmer也是这样做的，他们使用了商业加壳工具Themida，可以同时给感染器（infecotr）和释放器（dropper）加壳。
恶意软件执行起来后，它会检查文件系统是不是FAT32。如果是FAT32，它会在文件夹C:WindowsSystem32下释放netmgr.dll文件。如果是NTFS文件系统，会在XFS服务的可执行文件的NTFS数据流中存储相同的文件。将文件放在NTFS数据流中可以增加取证分析的难度。
样本在成功安装之后，会修改XFS可执行文件（SpiService.exe）的入口点。添加一个LoadLibrary函数调用，用来加载释放的netmgr.dll文件。这个文件也被Themida保护。
=700) window.open('http://image.3001.net/images/20160604/14650446097422.png')" style="max-width:700pxmax-height:700px" onload="if(is_ie6&&this.offsetWidth>700)this.width=700" >



-----------------------------------------------------------8-----------------------------------------------------------
0X8: 
     [06.15]WWDC2016安全快讯：提高安全性，macOS、iOS、tvOS、watchOS文件系统全部换新 

=700) window.open('http://image.3001.net/images/20160614/14658770072216.png')" style="max-width:700pxmax-height:700px" onload="if(is_ie6&&this.offsetWidth>700)this.width=700" >
昨晚的WWDC2016，各位果粉都看了吗？虽然传说中的新款MacBook Pro没有来，四款系统――macOS、iOS、tvOS、watchOS的更新还是有不少亮点的。不过不知是什么原因，四款系统有个较大幅度的更新苹果并没有在昨晚的keynote上提到：HFS+文件系统被替换掉了。


已超30年历史的HFS

HFS+实际上是基于已经超过30年历史的HFS打造的。即便是HFS+，也是苹果早在1998年的Mac OS 8.1系统中推出的。HFS+又名Mac OS扩展系统，针对HFS的主要改进在于对磁盘空间地址定位效率的提升，支持更大的文件、更长的文件名等。随后好几代的Mac OS X系统中，HFS+都有改进，比如2002年Mac OS X 10.2.2，HFS+增加可选日志功能，提高数据可靠性。
不过毕竟，HFS和HFS+都已经有些年代了，从苹果的系统中去除也并不奇怪。按照苹果所说
“HFS+是HFS的改进型文件系统，后者已有超过30年的历史。这两套文件系统算是软盘和机械硬盘时代的产物，那个时候文件尺寸还是以KB或MB来计的。
而现在固态硬盘大行其道，其中存储的数千万文件，数据量都是以GB甚至TB来计的。这个时代，保证敏感信息的安全显得越来越重要。我们需要全新的文件系统，满足当代苹果产品的需要，为未来的发展提供新技术。”


=700) window.open('http://image.3001.net/images/20160614/146587570813.png')" style="max-width:700pxmax-height:700px" onload="if(is_ie6&&this.offsetWidth>700)this.width=700" >


专注于加密的APFS

那么用以替代HFS+文件系统的是什么呢？Apple File System，或者简称为APFS，直译成中文叫苹果文件系统。这是个为加密准备的文件系统，会应用到最新的macOS、iOS、tvOS和watchOS系统中，显然是为进一步保证本地数据的安全性而生的。

“在Apple File System文件系统的设计中，安全和隐私是基本考量。自OS X 10.7系统以来，全盘加密（Full Disk Encryption）就已经是系统的重要功能了；至于移动系统，自iOS 4开始，就有针对每个文件分别的加密保护，也就是iOS Security Guide。
APFS将这两者进行了融合，实现对文件系统元数据的加密。APFS原生就支持加密。用户可以根据自己的需要选择不同的加密功能：无加密、单密钥加密（single-key encryption）、多密钥加密（multi-key encryption）。其中的多密钥加密，包含针对每个文件的密钥，针对敏感元数据也都有独立的密钥。
APFS会根据硬件配置，选择采用AES-XTS或AES-CBC加密模式。当设备的物理安全存在威胁时，多密钥加密也能够确保用户数据的完整性。”（这里的物理安全想必是指设备被盗或者损坏等状况）如果将斯诺登作为这个时代的分界线，或许前斯诺登时期，我们还没那么关注隐私安全。可在后斯诺登时期，隐私安全已经是人类发展的重要议题了，尤其是电子设备横行的当代。加上FBI和苹果前一阵的冲突，苹果新推APFS文件系统似乎是种必然。
* 参考来源：http://betanews.com/2016/06/13/apple-file-system-apfs-encryption/





-----------------------------------------------------------9-----------------------------------------------------------
0X9: 
     [06.15]HITB16议题解析：Java应用ORM注入开发新方法 

=700) window.open('http://image.3001.net/images/20160612/14657409903131.png')" style="max-width:700pxmax-height:700px" onload="if(is_ie6&&this.offsetWidth>700)this.width=700" >
“Hack In The Box”会议是在欧洲阿姆斯特丹举办的全球知名安全峰会。今年的会议十分有趣，其中一个由安全研究员Mikhail Egorov和Sergey Soldatov提出的议题“Java应用ORM注入开发新方法”引发了热议。


什么是对象关系映射（ORM）？

ORM是指对象映射关系，这是一种程序开发技术，用于实现面向对象编程语言里不同类型系统的数据之间的转换。从效果上说，它其实是创建了一个可在编程语言里使用的“虚拟对象数据库”。现今这项技术在商业应用广泛。
几个著名的Java ORM数据库：

�Hibernate ORM（经常应用在Wildfly和JBoss）
�eclipselink（例如GlassFish）
�TopLink（例如Oracle WebLogic）
�OpenJPA（例如TomEE和IBM WAS）

SQL vs ORM 注入

Mikhail 和Sergey专注于Java数据库ORM注入的研究。ORM注入也叫做JPQL或者HQL 注入，它们和SQL注入十分相似。不是直接定义SQL查询，ORM库使用自己专有语言JPQL/HQL(Java Persistence Query Language/Hibernate Query Language)。这些查询被ORM库译成SQL。




-----------------------------------------------------------10-----------------------------------------------------------
0X10: 
     [06.15]第三方服务侧漏：Let’s Encrypt泄露7618名用户邮箱地址 

=700) window.open('http://image.3001.net/images/20160613/14657759678486.jpg')" style="max-width:700pxmax-height:700px" onload="if(is_ie6&&this.offsetWidth>700)this.width=700" >
Let’s Encrypt翻译成中文叫“让我们来加密”，实际上这是个为广大网站免费颁发SSL/TLS证书的项目。Let’s Encrypt的来头不小，目前它是由Linux基金会托管的，发起该项目的组织包括Mozilla、思科、EFF等。这个项目对于Web世界由HTTP过渡到HTTPS是异常重要的。
然而最近，Let’s Encrypt自身却泄露了7000多名用户的电子邮件地址，这岂不是跟互联网安全的宗旨背道而驰吗？


Let’s Encrypt简介


Let’s Encrypt项目自问世以来就很受欢迎。据说到今年4月中旬，他们就已经发放了超过170万份证书。这也很好理解，毕竟Let’s Encrypt是免费发放证书的，这是利国利民的事业。
许多网站管理人员在享受这项服务的同时，还顺便订阅了Let’s Encrypt的简报――就类似于平常你在一家网站注册，或者购买某款产品之后，还订阅了这家网站的各种动态信息，网站会定期给你发邮件。目前Let’s Encrypt已经拥有38.3万订阅用户。
就在前两天，Let’s Encrypt给所有简报订阅用户发邮件，结果就出问题了。这封邮件并非什么机密信息，是相关订阅用户协议更新的。


第三方服务的侧漏

Let’s Encrypt并没有选择自己给用户发邮件，而是找第三方服务代发。在这封简报邮件发出后，7618名用户的邮件地址遭遇泄露。Let’s Encrypt ISRG执行董事Josh Aas表示，这是系统中的BUG导致的。
这套第三方系统会将订阅用户的电子邮件地址添加到发送队列中。BUG就在于，订阅队列中的第10个人，是可以看到订阅队列前9个人的电子邮件地址的。以此类推，大量用户的邮箱地址也就因此泄露了。收到这封邮件的部分用户，很快就将该问题反映给了Let’s Encrypt负责人。即便负责人很快采取措施，却已经有7618位用户收到了邮件，这些用户占到订阅用户总数的1.9%，悲剧也就这么发生了。
Aas表示：

“如果您收到了这封邮件，我们请求您不要公开这份邮箱地址列表。”Aas还说，未来一定会就此事件再做一份反馈报告。
*参考来源：http://news.softpedia.com/news/email-server-glitch-exposes-email-addresses-for-7-618-let-s-encrypt-users-505140.shtml







-----------------------------------------------------------11-----------------------------------------------------------
0X11: 
     [06.15]自动驾驶汽车要火了，安全威胁谁来负责？ 

黑客能够进入自动驾驶汽车的驾驶座吗？回答为一个响亮的”是”！
=700) window.open('http://image.3001.net/images/20160612/14657438481401.jpg')" style="max-width:700pxmax-height:700px" onload="if(is_ie6&&this.offsetWidth>700)this.width=700" >
就在去年，研究者/黑客Charlie Miller和Chris Valasek在Fiat-Chrysler(自由光)车型的移动Wi-Fi系统中发现了安全问题。
他们自己可以使用一台笔记本电脑控制Jeep Cherokee(自由光)的核心系统。控制后不仅可以随意改变音量，调节空调，打开雨刷，一旦再获得行车的控制权后，甚至可以将车停在高速公路上。
有木有很惊心动魄？
幸运的是这只是一项预先计划好的演示过程，整个过程由著名杂志Wired的一位编辑来演示的，但进行入侵攻击的部分并不是闹着玩的。这也导致汽车制造商不得不重新收回140万辆汽车。好处是这件事情给汽车行业和政府敲了警钟，很多公司已经开始和科技公司展开合作来提高自动驾驶汽车的安全性。对科技公司来说把研究重心转向自动驾驶汽车也许是个不错的选择。
一些专家认为，到2020年将是自驾驶汽车的黄金时期，那时候整个行业将突飞猛进地发展。对驾驶安全来说，这是件太容易被忽视的事情了，大家可以想想现在那些喝醉酒和开车总不专心的人们。我们不得不承认的事实时，即使我们在最好的状态下，我们也还是比不过计算机的反应速度。这就意味着在未来数百万的无人驾驶汽车将涌入我们现在行驶的道路中。这对黑客而言就是又多了上百万的攻击目标。
尽管对汽车行业来说还有许多时间来制定新的安全措施，但事实常常是黑客们“防不胜防”，他们也仍有很多入侵的策略。虽然很多公司和组织早早就开始制定了反黑客的策略，但是如今仍常听到许多数据泄漏的报道。
对大部分人来说，自驾驶汽车的网络攻击将开辟威胁人们的“新天地”，像自由光汽车突然停在高速公路上以后也许就并不新鲜了，它也可以进行传统的窃取个人信息的攻击活动。比如，当你坐上自驾驶汽车时，车不需要你来开了，那你将如何消磨这段时间呢？毫无疑问大部分人会拿出自己的移动设备，在线观看电影或电视，或者打开电脑开始工作，也会有人抓紧这个时间在网上买买买，当你通过无线连接使用网上银行或者传输其他敏感数据时，也就埋下了潜在危险的种子。
=700) window.open('http://image.3001.net/images/20160613/14657999296957.jpg')" style="max-width:700pxmax-height:700px" onload="if(is_ie6&&this.offsetWidth>700)this.width=700" >
而且据说这些数据中可能还包含医疗信息和乘客健康状况信息。因为一些自驾驶汽车制造商已在测试一些传感阵列，它们可以监测驾驶员的生命特征和生理反应，以防止驾驶员出现困倦，低血糖等情况。
自动驾驶汽车安全漏洞的威胁不只局限于汽车本身或汽车上的乘客。研究者们为了让自动驾驶汽车达到之前的种种期待，或者发挥技术的潜力，想在这些汽车间使用V2V通信来实现更高层次的联系。例如，当一辆汽车发生了交通事故时，它可以提醒它后面的汽车，这样后面的车就可以尽快采取相应的措施。
美国运输部早期做过的分析指出，如果全美国的汽车可以实现V2V技术，每年将挽救780到1080个人的生命，减少40万到60万场交通事故。但对于一些恶意黑客或恐怖分子而言，利用相同的技术也可以用于让自动驾驶汽车变成自己的武器等，扰乱正常的交通秩序，对公众安全造成巨大的威胁。

既然自驾驶汽车是我们发展的趋势和必然，那我们应该用什么样的姿态迎接它的到来？，及时做好准备应对可能会出现的安全问题不乏是一个好主意。*原文地址：http://betanews.com/2016/06/09/self-driving-cars-and-cybersecurity-what-are-the-risks-of-car-hacking/




 





-----------------------------------------------------------12-----------------------------------------------------------
0X12: 
     [06.15]子域名爆破工具subDomainsBrute 

关于查找和扫描二级域名对每一个搞渗透的小伙伴来说都是非常重要的一个环节。本文就是来讲一个通过小字典地柜的方式去发现三级、四级、五级等一些不容易被探测到的域名的小工具。
工具地址： https://github.com/lijiejie/subDomainsBrute
工具依赖于 dnspython插件，可以使用pip install dnspython进行安装。
 
 
功能特点
 
用小字典递归地发现三级域名，四级域名、五级域名等域名字典较为丰富，小字典就包括1万5千条，大字典多达6万3千条默认使用114DNS、百度DNS、阿里DNS这几个快速又可靠的Public DNS查询，可修改配置文件添加DNS服务器（在dict里面可以进行添加）自动去重泛解析的域名，当前规则： 超过2个域名指向同一IP，则此后发现的其他指向该IP的域名将被丢弃速度尚可，在我的PC上，每秒稳定扫描约3百个域名（30个线程）
 
使用方法
 

Usage: subDomainsBrute.py [options] target
Options:
-h, �helpshow this help message and exit
-t THREADS_NUM, �threads=THREADS_NUM
Number of threads. default = 10
-f NAMES_FILE, �file=NAMES_FILE
Dict file used to brute sub names
-o OUTPUT, �output=OUTPUT
Output file name. default is {target}.txt使用10个线程去扫描百度（仅用于演示，禁止非授权扫描）：

python subDomainsBrute.py -t 10 baidu.com
如zhuzhibo0果想指定输出到文件可以 追加�output
=700) window.open('http://image.3001.net/images/20160613/14657891895103.png')" style="max-width:700pxmax-height:700px" onload="if(is_ie6&&this.offsetWidth>700)this.width=700" >
 





-----------------------------------------------------------13-----------------------------------------------------------
0X13: 
     [06.15]Bolek银行木马：金融恶意软件市场的新威胁 

=700) window.open('http://image.3001.net/images/20160614/14658881029484.png')" style="max-width:700pxmax-height:700px" onload="if(is_ie6&&this.offsetWidth>700)this.width=700" >
Bolek是一款新的银行木马，衍生自泄露的Carberp和Zeus源代码。恶意软件编写者混合了二者的代码，形成了一款全新的银行木马，目前正威胁俄罗斯银行的客户安全。
CERT Poland研究人员在5月中旬首次发现了该木马。他们在调查一次起源于波兰的钓鱼事件时发现Bolek和Carberp的KBot模块略有相似。美国安全公司PhishMe就Bolek的运行模式进行了一次综合调查，发现Bolek和Carberp确实存在明显的相似之处。
Bolek是最近出现在金融恶意软件市场上的新型威胁。
6月初，Dr.Web和Arbor Networks安全厂商展开了调查，Arbor报告着重研究Bolek的C&ampC服务器通信，而Dr.Web则主要关注Bolek的运行模式以及同Carberp甚至原始的Zeus银行木马的相同点。
Dr.Web报告指出，该木马完全可以应对当前银行的生态系统，它通过注入网络浏览器进程从在线银行应用中获取登录凭证，截取用户界面，捕获网络流量，记录键盘输入，或者创建本地代理服务器来获取感染机器中的文件。
Bolek可以攻击Microsoft Internet Explorer、Google Chrome、Opera和Mozilla Firefox，并且自带嵌入式的密码抓取工具Mimikatz。
 
 
Bolek与Carberp和Zeus的相似点
 
Bolek仿照Carberp的部分，包括一个自定义的虚拟文件系统，存储那些用于逃避安全检测软件的各种操作文件。对应Zeus，Bolek主要借鉴的是其强大的注入机制，使其可以成功入侵浏览器进程，并在用户访问在线银行时控制整个网页。
另外，该木马可以感染Windows32位和64位系统，一旦收到远程服务器指令，会通过RDP（远程桌面协议）打开设备与攻击者的反向连接。
 
 
Bolek也可以通过感染其他文件进行传播
 
Dr.Web的研究人员最感兴趣的并不是Bolek的这些致命性的功能。Bolek感染后，其服务器会向木马发送一个命令，该命令可以激活类蠕虫自我传播机制。这使得该木马可以传播到相同文件系统或优盘的其他文件中。它可以感染32位或64位可执行文件，这些文件一旦移动到其他设备中便会帮助Bolek传播。
研究人员称：

“Trojan.Bolik.1的主要功能是窃取机密信息，Trojan.Bolik.1的功能和架构都十分复杂，因此Windows用户一旦被感染，将会造成严重后果。”
 
*原文地址：http://news.softpedia.com/news/combo-of-zeus-and-carberp-trojans-discovered-with-self-spreading-capabilities-505153.shtml
 


 





-----------------------------------------------------------14-----------------------------------------------------------
0X14: 
     [06.15]黑莓愿意递交用户数据，协助各国警方执法 

=700) window.open('http://image.3001.net/images/20160614/14658863586244.jpg')" style="max-width:700pxmax-height:700px" onload="if(is_ie6&&this.offsetWidth>700)this.width=700" >
黑莓手机在市场中的参与度越来越少，已经慢慢退出了普通用户的手掌，我们也只能在奥巴马这类的大人物手中才能看到黑莓的身影。因为现在黑莓主要向注重安全的企业级客户或者像奥巴马这样注重隐私的国家级领导人提供手机和通信服务，然而它的通信服务似乎没有想象中的那么安全……
 
 
成立专门部门负责拦截用户数据
 
加拿大广播公司CBC News调查发现，黑莓内部成立了一个专门的部门，帮助世界各地的执法部门拦截用户数据（包括BBM信息）。该部门大概有15个人，它们会在搜捕令和执法机构的请求下对用户机密信息打上标签，然后提供给对方。
据一个内部人员介绍，该公司不会像其他技术公司那样，定期发布透明性的安全报告。因为它每年都会收到很多无法公开的请求。
黑莓公司曾参与调查过巴西总统Dilma Rousseff的政治丑闻事件，拦截其短信内容并提交给相关执法机构，最终导致Dilma Rousseff总统被停职。黑莓还帮助美国职棒大联盟的一起毒品调查，导致纽约扬基队明星Alex Rodriguez被停赛。总而言之，黑莓公司的态度就是：热情的帮助世界各地执法机构去“kick ass”。
=700) window.open('http://image.3001.net/images/20160614/14658846934058.jpg')" style="max-width:700pxmax-height:700px" onload="if(is_ie6&&this.offsetWidth>700)this.width=700" >

“贩毒、贩卖人口、洗钱、绑架、针对儿童的犯罪等，黑莓知道所有这些事情……”黑莓公司在回应CBC News的问题时表示，“黑莓的指导原则（行动方针）是在做法律和道德范围内的事情，比如对犯罪调查提供援助、阻止政府侵犯公民的隐私。我们很清楚我们的立场，作为一家为公民利益着想的技术公司，应该积极配合执法部门的一些合法访问请求。”
前不久，苹果公司和FBI之间因为一部加密手机的事情闹得满城风雨，双方在各自的立场上坚持不妥协。苹果公司站在企业和用户的立场上，坚持不泄露用户的隐私；而FBI则站在执法的立场上，迫切需要苹果公司给出解密密钥，找出关键证据（悲剧的是，手机里并没有关键证据）。
苹果公司选择的是坚决不泄露用户隐私，然而黑莓公司的观点却截然不同，它选择配合执法部门的请求，尽力提供相关证据。并且该部门还制定了一个详细的流程，只有在律师给予通行证的情况下，黑莓才会拦截并解密用户信息。

 
 
黑莓提供的用户信息
 
 
=700) window.open('http://image.3001.net/images/20160614/14658847331107.jpg')" style="max-width:700pxmax-height:700px" onload="if(is_ie6&&this.offsetWidth>700)this.width=700" >
黑莓会给执法部门提供的数据大致分为3种：

1，设备、账号、用户数据（PIN、IMEI、SIM、黑莓ID、姓名、地址、支付信息、购买信息 ）
2，信息交易日志
3，其他 需要说明的是，“其他”选项才是执法机构请求黑莓帮忙的重点内容，比如拦截和解密用户通讯。
在执行请求时，执法机构需要签署一份声明，确认他们的请求在本国是合法的，并且他们只是配合执法机构进行调查、起诉侵犯法律的行为，不是对表达政治和宗教观点的人进行控制、压制和惩罚。
 
 
黑莓可能会滥用公民隐私
 
Christopher Parsons是多伦多大学公民实验室的一名研究员，致力于研究各科技公司的隐私做法，由于看多了用户隐私被利用的行为，所以他担心黑莓公司的这种隐私做法可能会存在被滥用的可能。

“合法的请求可能是由一名受贿赂的法官签署，所以这种情况可能就很糟糕了，而且世界上存在很多这种现象。”黑莓方面对于这种做法的解释是：“如果有能力协助执法机构将坏人绳之以法，为什么不伸出援助之手呢？怎么能问心无愧的纵容坏人为所欲为呢？”
然而，美国法律明令禁止苹果、Facebook和谷歌之类的科技公司应外国机构拦截用户通信。
 
 
奥巴马已弃用黑莓手机
 
 
最新消息：奥巴马终于抛弃了黑莓手机，然而替代黑莓的是一部我们无法想象的“智能”手机。出于安全考虑，这部手机在出厂时就做出了功能限制：不能拍照、不能播放音乐、不能发送短信，甚至不能拨打电话。
在参加一个脱口秀节目――《Tonight Show》中，奥巴马明确表示非常嫉妒夫人和女儿天天可以使用“真正的”智能手机。好在奥巴马的任期快要结束了，很快也可以使用真正意义上的智能手机了。
*原文地址：http://www.cbc.ca/news/technology/blackberry-taps-user-messages-1.3620186


 





-----------------------------------------------------------15-----------------------------------------------------------
0X15: 
     怎样让你的网站更突出？ 


高校网站因为其特殊的属性，一般不担心网站流量的问题，但网站的性能表现和整体设计还是影响访问者对学校的印象。作为高校形象宣传的重要构成部分，高校网站也应重视用户体验优化，从多方面考虑加强网站建设。博达软件作为高校网站群专业的提供商，始终认为，优秀的网站总会让用户在感受舒适的同时还能体验到一些小惊喜，比如一些完全超乎用户认知和期望的功能细节。
页面简洁图文整端
页面简洁、图文整端的网站往往会给来访者留下舒适的印象。人都是靠视觉来判断好坏的，网站整体布局的美观性很大程度上可以让用户在访问网站的时候产生好感，这种好感就是大家一直追求的用户体验优化度。
另外，网站还需要根据数据分析后的结果进行微调，将用户点击率高的文章提升到重要位置进行展示，减少用户的搜索时间成本，增加用户粘性，减少跳出率。
导航清晰明了，网站路径层级简短
一个用户体验优化高的网站肯定导航清晰明了，导航是用户进入我们网站时“一见钟情”的重要位置，用户会在导航寻找适合自己的分类栏目从而进行第二次访问，所以导航分类是否合理直接影响到用户体验优化和网站权重。
网站路径层级简短可以大大减少蜘蛛的爬取深度，让蜘蛛对网站文章的抓取更加容易，同时还能减少用户对网址的记忆成本，加大传播的便捷性。
网页打开速度很重要
在这个快餐社会中，网页打开速度的快慢可以直接决定一个网站的生死。当网页打开速速过慢，会极大地提升网站的跳出率，百度如果从统计中发现你网站跳出率，并根据跳出率来衡量网站的得分，得分低，排名自然低。
在网站运营领域一直流传着这样一个黄金定律“3秒原则”，即网页载入慢一秒，网站将会流失7%的用户。试想一下，当用户好不容易找到你的网站，但是点开之后半天没反应，他会怎么办?
内容定时更新且满足用户所需
搜索引擎一直以来都是偏向时常更新且文章内容全原创还高质量的网站，毕竟用户体验还是最重要的，这对高校也是一样。比如当访问者点击进入某高校的官网，看到的文章内容没有什么价值，也难以产生共鸣，更无法解答他的问题和疑惑，相信他会对学校的整体印象大打折扣。
正文排版整洁、分段明确
很多老旧的、长时间没有更新的高校网站，不太讲究排版，文字密密麻麻，布局混乱，很容易让人产生视觉疲劳感。图文混排好的正文排版让人第一眼看上去是非常舒服的，这样才会让网站访问者有继续读下去的渴望。
就好比一篇文章没有段落、没有分段标题、没有图片，即使内容再好，大概也没有人会报有很大的热情继续看下去吧。在内容为王的时代，如果想让你的网站给访者留下好的印象，请先确保内容的呈现方式是大家都乐于接受的。
网站配图具备alt属性
毫无疑问，几乎所有的网站都会有各种各样的配图，图片站更是汇聚了大量的图片，如此，alt属性就显得非常有必要了。图片做alt标签一则可以满足蜘蛛抓取的需求，使得蜘蛛很容易可以读取该图片的内容是什么二则可以满足用户的需求，让用户知道该图片是干嘛的三则可以增加网站关键词密度，使得关键词排名靠前。




-----------------------------------------------------------16-----------------------------------------------------------
0X16: 
     康众网络安全周报第十一期丨ARP病毒查找与防范 

康众网络安全周报第十一期丨ARP病毒查找与防范



-----------------------------------------------------------17-----------------------------------------------------------
0X17: 
     [06.14]苹果推Apple TV更新：可直接用Siri搜索电视节目 






=700) window.open('http://n.sinaimg.cn/tech/transform/20160614/imr5-fxszmaa1964074.jpg')" style="max-width:700pxmax-height:700px" onload="if(is_ie6&&this.offsetWidth>700)this.width=700" >



-----------------------------------------------------------18-----------------------------------------------------------
0X18: 
     [06.14]微软将以262亿美元收购LinkedIn 品牌保持独立 


微软周一宣布，将以262亿美元现金收购LinkedIn。这是微软历史上最大一笔收购。
　　微软在博客中称，将以每股196美元的现金收购LinkedIn。交易完成后，微软将继续保留LinkedIn品牌、文化和独立性，而杰夫・韦纳尔(Jeff Weiner)将继续担任CEO，向微软CEO萨蒂亚・纳德拉(Satya Nadell)汇报工作。
　　LinkedIn董事长雷德・霍夫曼(Reid Hoffman)在声明中说：“今天对Linkedin来说是个重生的时刻。”霍夫曼表示，他完全支持这笔交易。
　　微软CEO萨蒂亚・纳德拉(Satya Nadell)称：“我一直看好LinkedIn，关于收购事宜，我们谈了很长时间。”
　　微软表示，交易完成后将通过强化个人和企业订阅服务，以及精准广告服务来加速LinkedIn商业化。
　　虽然每股196美元的报价较LinkedIn上周五收盘价溢价近50%，但远低于LinkedIn 2015年创下了的270多美元的记录。LinkedIn 2011年上市，当时的发行价仅45美元。
　　Tigress Financial Partners分析师伊凡・费恩塞斯(Ivan Feinseth)称：“LinkedIn是一家伟大的公司，虽然近期表现低迷，但也值得微软给出高价。”
　　微软表示，将通过发行新债来资助这笔并购交易。双方预计，这笔交易有望在今年年底前完成。届时，LinkedIn将并入微软的“生产力和业务流程”部门。
　　受该消息刺激，LinkedIn盘前股价上涨近50%，至194.5美元，LinkedIn目前市值为175.1亿美元；而微软盘前股价略微下跌0.35%，至51.3美元。
　　职场社交网站LinkedIn于2003年投入运营。2013年，该公司在纽交所上市，上市时的融资额为12亿美元。截至上个财季末(2016年3月)，LinkedIn在全球共有1.06亿活跃用户。
　　对此，Techcrunch发布文章评论称这是一笔双赢的交易。
　　文章认为，无论是对于微软还是LinkedIn，这笔交易均意义非凡。对于微软而言，这笔交易将把一项核心、目前尚未拥有的业务纳入公司战略，从而为企业提供更广泛的服务。
在社交网络服务和专业内容方面，LinkedIn会让微软的服务涵盖面更广泛。此外，LinkedIn的社交网络还将赋予微软一个潜在销售渠道。
　　另外，LinkedIn进行的一些并购也对微软极具吸引力。例如，LinkedIn通过收购Lynda.com为用户提供在线学习工具。而微软可以通过部署这样的工具指导用户如何使用自己的软件产品，从而进一步推动产品销量。
　　而对于LinkedIn，被微软收购后，公司当前所面临的一些问题将得到缓解。例如，如何与对手竞争，用户和营收增长缓慢，以及股价下滑等问题。
　　当然，这笔交易也并不是完全关于一家正在走下坡路的公司找到一个靠山。虽然公司股价目前低于258美元的12个月最高纪录，但LinkedIn仍是一家表现不俗的上市科技公司。
　　在社交网络领域，微软从未取得过太大的胜利，而LinkedIn有助于让微软在该领域占有重要的一席之地。




-----------------------------------------------------------19-----------------------------------------------------------
0X19: 
     [06.14]苹果CEO库克：苹果开发者达到1300万 

苹果CEO库克：苹果开发者达到1300万
 



=700) window.open('http://n.sinaimg.cn/tech/transform/20160614/exhU-fxszmaa1963960.jpg')" style="max-width:700pxmax-height:700px" onload="if(is_ie6&&this.offsetWidth>700)this.width=700" >　　



-----------------------------------------------------------20-----------------------------------------------------------
0X20: 
     [06.14]苹果介绍iOS 10：Siri支持第三方应用 对开发者开放 






=700) window.open('http://n.sinaimg.cn/tech/transform/20160614/VH_i-fxszkzy5222482.jpg')" style="max-width:700pxmax-height:700px" onload="if(is_ie6&&this.offsetWidth>700)this.width=700" >



-----------------------------------------------------------21-----------------------------------------------------------
0X21: 
     [06.14]Swift Playgrounds发布：用iPad培养下一代开发者 

苹果公司举行2016年WWDC全球开发者大会，介绍了watchOS、tvOS、macOS以及iOS 10系统的新特性。
Swift Playgrounds可以让儿童在iPad上学习如何编程，并且可以实时运行所编写的代码。学习者可以从代码库直接拖拽一段代码来实现某个功能，这让编程看上去更像是拼图游戏。
然而swift playgrounds不仅有基础的编程教学，还具备专业的编写模式。让人眼前一亮的是，还可以借助iPad的硬件功能来检验代码的运行效果。这让人感觉像是让一个实体模拟器具备了编译器功能。
Swift Playgrounds将于秋季正式推出，免费面向所有学校使用。






-----------------------------------------------------------22-----------------------------------------------------------
0X22: 
     [06.14]苹果没有公布VR战略 可能是因为体验还不够好 

=700) window.open('http://n.sinaimg.cn/tech/transform/20160614/5eKb-fxszmai2227444.jpg')" style="max-width:700pxmax-height:700px" onload="if(is_ie6&&this.offsetWidth>700)this.width=700" >



-----------------------------------------------------------23-----------------------------------------------------------
0X23: 
     [06.14]WWDC2016展示苹果未来发展四大趋势，但新意在哪 

=700) window.open('http://s.img.mix.sina.com.cn/auto/resize?size=560_0&ampimg=http%3A%2F%2Fsinastorage.com%2Fstorage.caitou.sina.com.cn%2Fproducts%2F201606%2F6e6164cd7b4617f135d9e6f7facb998c.jpeg')" style="max-width:700pxmax-height:700px" onload="if(is_ie6&&this.offsetWidth>700)this.width=700" >



-----------------------------------------------------------24-----------------------------------------------------------
0X24: 
     [06.14]微软Office与社交网络LinkedIn将如何相互帮助？ 

=700) window.open('http://n.sinaimg.cn/tech/transform/20160614/A0Df-fxszmaa1971140.png')" style="max-width:700pxmax-height:700px" onload="if(is_ie6&&this.offsetWidth>700)this.width=700" >LinkedIn月活跃用户和总用户数(单位：百万)



